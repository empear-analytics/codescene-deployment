AWSTemplateFormatVersion: 2010-09-09
Description: A CodeScene On-Prem Instance behind an ELB using HTTPS. 

Metadata: 

  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - Label:  
          default: App Configuration
        Parameters: 
          - DockerImage
      - Label:  
          default: Network Configuration
        Parameters: 
          - DomainName
          - SubdomainName
          - CertificateARN
          - VPC
          - LoadBalancerSubnets
          - EC2Subnet
          - AllowedIpOrigin
      - Label: 
          default: EC2 Configuration
        Parameters: 
          - SSHKeyName
          - InstanceType
          - EC2AmiId

Parameters:

  DockerImage:
    Description: The docker image to run on the EC2 instance.
    Type: String
    Default: empear/codescene:latest

  SSHKeyName:
    Description: Name of the key pair used for ssh to the EC2 instance
    Type: AWS::EC2::KeyPair::KeyName

  CertificateARN:
    Description: Enter your certificate ARN. This is used to enable HTTPS communication.
    Type: String

  DomainName:
    Description: Your codescene website domain - the HostedZoneName in Route 53, but without the trailing dot.
    Type: String

  SubdomainName:
    Description: The subdomain name of the dns entry - this will be prepended to DomainName.
    Type: String

  VPC:
    Description: The VPC to CodeScene in.
    Type: AWS::EC2::VPC::Id

  LoadBalancerSubnets:
    Description: The Subnets used by the LoadBalancer - select at least two subnets.
    Type: List<AWS::EC2::Subnet::Id>

  EC2Subnet:
    Description: The Subnet where the EC2 instance is placed.
    Type: AWS::EC2::Subnet::Id

  InstanceType: 
    Description: Select your instance type (https://aws.amazon.com/ec2/instance-types/t3/) - we recommend at least 4 GB ram and ideally 4 or more vCPUs.
    Type: String
    Default: t3.medium
    AllowedValues: 
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge

  EC2AmiId:
    Description: SSM parameter key storing the EC2 instance AMI ID - see https://aws.amazon.com/blogs/compute/query-for-the-latest-amazon-linux-ami-ids-using-aws-systems-manager-parameter-store/
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  # see https://stackoverflow.com/questions/58629745/cloudformation-aws-assign-an-ip-address-to-a-customergateway-using-parameters
  AllowedIpOrigin:
    Description: IP Address(es) allowed to connect to CodeScene (load balancer). Use CIDR format, e.g. 93.184.216.34/32.
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x, e.g. 93.184.216.34/32.
  
Mappings:

  # File contents used when setting up the EC2 instance
  Files:
    reverseproxy-conf:
      content: |
        server {
          listen 80;
          server_name local.codescene.io;
          root /opt/www;
          
          location /health-check {
            access_log off;
            return 200;
            add_header Content-Type text/plain;
          }

          location / {
            proxy_pass http://codescene:3003;
            proxy_set_header        Host            $host;
            proxy_set_header        X-Real-IP       $remote_addr;
          }
        }

  # Scripts used when setting up the EC2 instance
  Scripts:
    install-docker-compose:
      command: |
        #!/bin/bash -x
        curl -L https://github.com/docker/compose/releases/download/v2.6.1/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
        usermod -aG docker ec2-user
    configure-codescene:
      command: |
        #!/bin/bash -x
        # Make sure the ec2-user owns the codescene configuration
        chown -R ec2-user:ec2-user /home/ec2-user/codescene
    run-codescene:
      command: |
        #!/bin/bash -x
        sudo -u ec2-user -i <<EOF
          docker-compose -f /home/ec2-user/codescene/docker-compose.yml up -d
        EOF

Resources:

  # ELB Security Group allowing Port 80 and 443 from anywhere
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Port 443
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedIpOrigin
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref AllowedIpOrigin

  # EC2 Security Group Allowing Port 22 from anywhere and port 80 from load balancer
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH and Port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # TODO: remove SSH port and use SSM manager instead
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedIpOrigin
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ELBSecurityGroup

  # Route53 RecordSet for reaching the load balancer using the specified name
  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      Name: !Sub '${SubdomainName}.${DomainName}'
      Type: CNAME
      TTL: 300
      ResourceRecords:
      - !GetAtt ApplicationLoadBalancer.DNSName

  # EC2 Instance with Codescene/nginx using docker-compose
  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata: 
      AWS::CloudFormation::Init:
        configSets:
          default:
            - enable_extras
            - basic_install
            - custom_install
            - configuration
            - startup
        enable_extras:
          commands:
            enable_docker:
              command: amazon-linux-extras enable docker
        basic_install: 
          packages:
            yum:
              docker : []
          services: 
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
        custom_install:
          commands:
            1_install_docker_compose:
              command: !FindInMap [ Scripts, install-docker-compose, command ]
        configuration:
          files:
            /home/ec2-user/codescene/nginx/conf.d/reverseproxy.conf:
              content: !FindInMap [ Files, reverseproxy-conf, content ] 
            /home/ec2-user/codescene/docker-compose.yml:
              content: !Sub |
                version: '3.2'
                services:
                  reverseproxy:
                    image: nginx:latest
                    depends_on:
                      - codescene    
                    restart: always
                    ports:
                      - 80:80
                    volumes:
                      - ~/codescene/nginx/conf.d:/etc/nginx/conf.d
                      - ~/codescene/nginx/error.log:/etc/nginx/error_log.log

                  codescene:
                    image: ${DockerImage}
                    restart: always
                    volumes:
                      - ./codescene:/codescene
          commands:
            1_configure_codescene:
              command: !FindInMap [ Scripts, configure-codescene, command ]
        startup:
          commands:
            1_run_codescene:
              command: !FindInMap [ Scripts, run-codescene, command ]
    Properties:
      ImageId: !Ref EC2AmiId
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !Ref InstanceType
      KeyName: !Ref SSHKeyName
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EC2Instance
      Monitoring: true
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        GroupSet:
        - !Ref EC2SecurityGroup
        SubnetId: !Ref EC2Subnet
      Tenancy: default
      BlockDeviceMappings: 
      - DeviceName: /dev/xvda
        Ebs: 
          VolumeSize: 100
          # do not delete the data when the instance is terminated
          DeleteOnTermination: false
          VolumeType: gp3
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash -x
          # Install the files and packages from the metadata
          /opt/aws/bin/cfn-init \
            --stack ${AWS::StackName} \
            --resource EC2Instance \
            --region ${AWS::Region}
          # Signal the status from cfn-init
          /opt/aws/bin/cfn-signal \
            -e $? \
            --stack ${AWS::StackName} \
            --resource EC2Instance \
            --region ${AWS::Region}

  # Target Group
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health-check
      HealthCheckIntervalSeconds: 15
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 20
      Targets:
      - Id: !Ref EC2Instance
        Port: 80
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: EC2TargetGroup
      - Key: Port
        Value: 80

  #ELB (ALB)
  ALBHttpRedirectListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: 443
            Protocol: HTTPS
            Query: '#{query}'
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateARN
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2020-10
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing # or internal
      Subnets: !Ref LoadBalancerSubnets
      SecurityGroups:
      - Ref: ELBSecurityGroup

Outputs:

  ALBHostName:
    Description: Application Load Balancer Hostname
    Value: !GetAtt ApplicationLoadBalancer.DNSName
  EC2Instance:
    Description: EC2 Instance
    Value: !Ref EC2Instance
  EC2TargetGroup:
    Description: EC2 Target Group
    Value: !Ref EC2TargetGroup
  ApplicationLoadBalancer:
    Description: Application Load Balancer
    Value: !Ref ApplicationLoadBalancer
